import streamlit as st
import pandas as pd
import re
from utils.helpers import (
    calculate_indicator_points,
    format_currency,
    get_parameter_value,
    set_parameter_value
)
from models import Indicateur
from utils import get_session

def show():
    """Affiche la page de gestion des indicateurs."""
    st.title("üéØ Gestion des indicateurs ACI")
    
    # Section d'information sur la m√©thode de calcul
    with st.expander("‚ÑπÔ∏è M√©thode de calcul des indicateurs ACI", expanded=False):
        st.markdown("""
        ## M√©thode de calcul des indicateurs ACI
        
        ### Indicateurs Socles (pr√©requis)
        Ces indicateurs donnent un nombre de points fixe ou proratis√© selon la patient√®le, et sont obligatoires pour d√©clencher la dotation ACI.
        
        #### Acc√®s aux soins
        
        **Amplitude horaires** : 
        - Amplitude compl√®te : 800 points si la MSP est ouverte de 8h √† 20h du lundi au vendredi et le samedi matin.
        - Amplitude r√©duite : 
            - 740 points si ouverture 10h-12h lun-ven + samedi matin
            - 650 points si ouverture 8h-10h lun-ven + samedi matin
            - 680 points si fermeture le samedi matin
            - 780 points si fermeture limit√©e √† ‚â§ 3 semaines/an
            
        **R√©ponse aux crises sanitaires graves** :
        - Plan de pr√©paration : 100 points si la MSP dispose d'un plan formalis√©.
        - Actions compl√©mentaires : 350 points proratis√©s (350 √ó patient√®le/4000) si le plan est actif.
        
        #### Travail en √©quipe
        
        **Coordination formalis√©e** : 
        - 1000 points si une fonction de coordination est identifi√©e (temps et fiche de poste).
        - 1700 points proratis√©s selon le nombre de patients (1700 √ó patient√®le/4000).
        
        **Protocoles et concertation pluriprofessionnelle** :
        - Protocoles √©tablis : 100 points par protocole, jusqu'√† 8 maximum (800 points).
        - Int√©gration d'un IPA : 40 points suppl√©mentaires par protocole.
        - R√©unions RCP : 1000 points proratis√©s (1000 √ó patient√®le/4000) si au moins 6 r√©unions/an.
        - Compte-rendu formalis√© : 200 points proratis√©s si au moins un compte‚Äërendu formalis√©.
        
        #### Syst√®me d'information
        
        **Labellisation** :
        - 500 points si utilisation d'un dossier patient informatis√© labellis√©.
        - 200 points pour chacun des 16 premiers professionnels √©quip√©s.
        - 150 points pour chaque professionnel suppl√©mentaire.
        
        ### Indicateurs Optionnels
        
        **Diversit√© de services** :
        - 300 points pour niveau 1 (ex. une profession m√©dicale ou pharmacien en plus)
        - 300 points pour niveau 2 (ex. 3 professions param√©dicales diff√©rentes)
        
        **Consultations de second recours** :
        - 300 points niveau 1 (acc√®s ponctuel √† un sp√©cialiste ext√©rieur)
        - 300 points niveau 2 (au moins 2,5 jours de consultations par semaine)
        
        **Contrat de Solidarit√© Territoriale** :
        - 200 points si au moins un m√©decin a sign√© un CST
        - 100 points suppl√©mentaires si ‚â• 50% des m√©decins s'engagent
        
        **Missions de sant√© publique** :
        - 350 points pour chaque mission jusqu'√† 2, proratis√©s selon la patient√®le
        - 200 points bonus d√®s que ‚â• 2 missions sont r√©alis√©es
        
        **Implication des usagers** :
        - 200 points niveau 1 (mise en place d'outils de participation)
        - 300 points niveau 2 proratis√©s selon la patient√®le
        
        **Dispositif SAS (soins non programm√©s)** :
        - 200 points niveau 1 (tous les m√©decins participent)
        - 100 points niveau 2 (‚â• 50% des m√©decins participent)
        
        **Formation des jeunes professionnels** :
        - 450 points si ‚â• 2 stages/an r√©alis√©s
        - 225 points suppl√©mentaires pour un 3·µâ stage
        - 225 points suppl√©mentaires pour un 4·µâ stage
        
        **Autres indicateurs optionnels** :
        - Transmission des donn√©es : 200 points proratis√©s si proc√©dure formalis√©e
        - D√©marche qualit√© : 100 points (niveau 1), 200 points proratis√©s (niveau 2), 300 points proratis√©s (niveau 3)
        - Protocoles de coop√©ration : 100 points fixes
        - Parcours insuffisance cardiaque : 100 points proratis√©s
        - Parcours surpoids/ob√©sit√© de l'enfant : 100 points fixes
        - Syst√®me d'information avanc√© : 100 points fixes pour niveau labellis√© "avanc√©"
        
        ### Calcul final de la dotation
        
        - Points totaux = Total Socles + Total Optionnels
        - Dotation annuelle = Points totaux √ó Valeur du point (ex. 7 ‚Ç¨)
        """)
    
    # R√©cup√©rer les param√®tres n√©cessaires
    valeur_point = float(get_parameter_value("valeur_point") or 7)
    patientele = int(get_parameter_value("patientele") or 4000)
    nombre_ps = int(get_parameter_value("nombre_ps") or 10)
    taux_dossiers = float(get_parameter_value("taux_dossiers") or 5)
    
    # Formulaire pour mettre √† jour les param√®tres
    with st.expander("‚öôÔ∏è Param√®tres de calcul", expanded=False):
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            new_patientele = st.number_input(
                "üßë‚Äç‚öïÔ∏è Patient√®le",
                min_value=0,
                value=patientele,
                step=100,
                help="Nombre de patients de la structure"
            )
        
        with col2:
            new_nombre_ps = st.number_input(
                "üë®‚Äç‚öïÔ∏è Nombre de PS",
                min_value=1,
                value=nombre_ps,
                step=1,
                help="Nombre de professionnels de sant√©"
            )
        
        with col3:
            new_taux_dossiers = st.number_input(
                "üìã Taux de dossiers (%)",
                min_value=0.0,
                max_value=100.0,
                value=taux_dossiers,
                step=0.5,
                help="Pourcentage de dossiers pour la concertation pluri-professionnelle"
            )
        
        with col4:
            new_valeur_point = st.number_input(
                "üí≤ Valeur du point (‚Ç¨)",
                min_value=0.0,
                value=valeur_point,
                step=0.1,
                help="Valeur d'un point en euros"
            )
        
        if st.button("Mettre √† jour les param√®tres"):
            set_parameter_value("patientele", str(new_patientele))
            set_parameter_value("nombre_ps", str(new_nombre_ps))
            set_parameter_value("taux_dossiers", str(new_taux_dossiers))
            set_parameter_value("valeur_point", str(new_valeur_point))
            st.success("‚úÖ Param√®tres mis √† jour avec succ√®s !")
            st.rerun()
    
    # Cr√©er des onglets pour chaque axe
    tab_icons = ["üè•", "üë•", "üíª"]
    tab_names = ["Acc√®s aux soins", "Travail en √©quipe & coordination", "Syst√®me d'information"]
    
    tabs = st.tabs([f"{icon} {name}" for icon, name in zip(tab_icons, tab_names)])
    
    # R√©cup√©rer tous les indicateurs
    session = get_session()
    indicateurs = session.query(Indicateur).all()
    session.close()
    
    # Grouper les indicateurs par axe
    indicateurs_par_axe = {
        "Acc√®s aux soins": [],
        "Travail en √©quipe & coordination": [],
        "Syst√®me d'information": []
    }
    
    for indicateur in indicateurs:
        if indicateur.axe in indicateurs_par_axe:
            indicateurs_par_axe[indicateur.axe].append(indicateur)
    
    # Fonction pour regrouper les indicateurs similaires
    def grouper_indicateurs(indicateurs):
        groupes = {}
        for indicateur in indicateurs:
            # Extraire le nom de base (sans le niveau/seuil/variante)
            nom_base = re.sub(r' - Niveau \d+| \(\d+% m√©decins\)| \(avec IPA\)| \(sans IPA\)| - Variable.*| - Fixe.*| - Activation.*| - Plan.*', '', indicateur.nom)
            
            # Regrouper par nom de base
            if nom_base not in groupes:
                groupes[nom_base] = []
            groupes[nom_base].append(indicateur)
        
        return groupes
    
    # Fonction pour afficher un indicateur simple
    def afficher_indicateur_simple(indicateur, tab_index):
        with st.container():
            col1, col2 = st.columns([3, 2])
            
            with col1:
                est_valide = st.checkbox(
                    f"{indicateur.nom}",
                    value=indicateur.est_valide,
                    key=f"check_{indicateur.id}"
                )
                
                if est_valide != indicateur.est_valide:
                    session = get_session()
                    indic = session.query(Indicateur).filter_by(id=indicateur.id).first()
                    indic.est_valide = est_valide
                    session.commit()
                    session.close()
                    st.rerun()
            
            with col2:
                col_pts1, col_pts2, col_pts3 = st.columns(3)
                with col_pts1:
                    points_fixes = indicateur.points_fixes
                    st.write(f"üîí **Fixe**: {points_fixes}")
                
                with col_pts2:
                    points_variables = indicateur.points_variables
                    st.write(f"üìä **Variable**: {points_variables}")
                
                with col_pts3:
                    # Calculer les points totaux pour cet indicateur
                    points_totaux = calculate_indicator_points(
                        indicateur.id,
                        patientele=patientele,
                        nombre_ps=nombre_ps,
                        taux_dossiers=taux_dossiers/100  # Convertir en pourcentage
                    )
                    
                    montant = points_totaux * valeur_point if indicateur.est_valide else 0
                    st.write(f"üí∞ **{format_currency(montant)}**")
            
            # Afficher la formule de calcul si elle existe
            if indicateur.formule_calcul:
                st.caption(f"‚ÑπÔ∏è {indicateur.formule_calcul}")
            
            # Ajouter un s√©parateur
            st.markdown("---")
    
    # Fonction pour afficher un groupe d'indicateurs
    def afficher_groupe_indicateurs(nom_groupe, indicateurs_groupe, tab_index):
        with st.container():
            st.write(f"### {nom_groupe}")
            
            # Cr√©er des options pour le menu d√©roulant
            options = ["üö´ Non valid√©"]
            id_map = {0: None}  # Pour mapper l'option s√©lectionn√©e √† l'ID de l'indicateur
            
            for i, ind in enumerate(indicateurs_groupe):
                # Extraire le niveau/variante pour l'affichage
                if " - Niveau " in ind.nom:
                    niveau = ind.nom.split(" - Niveau ")[1]
                    options.append(f"‚úÖ Niveau {niveau}")
                elif " - Variable " in ind.nom:
                    variante = ind.nom.split(" - Variable ")[1]
                    options.append(f"üìà Variable: {variante}")
                elif " - Fixe" in ind.nom:
                    options.append("üîí Fixe")
                elif "(avec IPA)" in ind.nom:
                    options.append("üë©‚Äç‚öïÔ∏è Avec IPA")
                elif "(sans IPA)" in ind.nom:
                    options.append("üë§ Sans IPA")
                elif " m√©decins)" in ind.nom:
                    pourcentage = ind.nom.split("(")[1].split(" m√©decins")[0]
                    options.append(f"ü©∫ {pourcentage}")
                elif " - Plan" in ind.nom:
                    options.append("üìù Plan")
                elif " - Activation" in ind.nom:
                    options.append("üö® Activation")
                else:
                    options.append(f"‚úÖ {ind.nom}")
                
                id_map[i+1] = ind.id
            
            # D√©terminer l'option s√©lectionn√©e par d√©faut
            option_defaut = 0
            for i, ind in enumerate(indicateurs_groupe):
                if ind.est_valide:
                    option_defaut = i+1
                    break
            
            # Afficher le menu d√©roulant ou les cases √† cocher
            if len(indicateurs_groupe) <= 3 and all(ind.type == "socle" for ind in indicateurs_groupe):
                # Utiliser des cases √† cocher pour les indicateurs socle qui vont ensemble
                selected_ids = []
                
                for ind in indicateurs_groupe:
                    icon = "üîí"
                    if " - Variable " in ind.nom:
                        variante = ind.nom.split(" - Variable ")[1]
                        label = f"üìà Variable: {variante}"
                    elif " - Fixe" in ind.nom:
                        label = "üîí Fixe"
                    elif "(avec IPA)" in ind.nom:
                        label = "üë©‚Äç‚öïÔ∏è Avec IPA"
                    elif "(sans IPA)" in ind.nom:
                        label = "üë§ Sans IPA"
                    elif " - Plan" in ind.nom:
                        label = "üìù Plan"
                    elif " - Activation" in ind.nom:
                        label = "üö® Activation"
                    else:
                        label = ind.nom
                    
                    est_valide = st.checkbox(
                        label,
                        value=ind.est_valide,
                        key=f"check_{ind.id}"
                    )
                    
                    if est_valide != ind.est_valide:
                        session = get_session()
                        indic = session.query(Indicateur).filter_by(id=ind.id).first()
                        indic.est_valide = est_valide
                        session.commit()
                        session.close()
                        selected_ids.append(ind.id)
                
                if selected_ids:
                    st.rerun()
            else:
                # Utiliser un menu d√©roulant pour les indicateurs s'excluant mutuellement
                selected_option = st.selectbox(
                    "Niveau valid√©",
                    options=options,
                    index=option_defaut,
                    key=f"select_{nom_groupe}"
                )
                
                # Mettre √† jour la base de donn√©es
                selected_id = id_map[options.index(selected_option)]
                
                if selected_id:
                    # V√©rifier si le statut a chang√©
                    changed = False
                    session = get_session()
                    
                    for ind in indicateurs_groupe:
                        indic = session.query(Indicateur).filter_by(id=ind.id).first()
                        if ind.id == selected_id and not indic.est_valide:
                            indic.est_valide = True
                            changed = True
                        elif ind.id != selected_id and indic.est_valide:
                            indic.est_valide = False
                            changed = True
                    
                    if changed:
                        session.commit()
                        st.rerun()
                    
                    session.close()
            
            # Afficher les d√©tails des indicateurs valid√©s
            for ind in indicateurs_groupe:
                if ind.est_valide:
                    col1, col2, col3 = st.columns([2, 1, 1])
                    
                    with col1:
                        points_fixes = ind.points_fixes
                        points_variables = ind.points_variables
                        st.write(f"**üî¢ Points**: {points_fixes} fixes + {points_variables} variables")
                    
                    with col2:
                        # Calculer les points totaux
                        points_totaux = calculate_indicator_points(
                            ind.id,
                            patientele=patientele,
                            nombre_ps=nombre_ps,
                            taux_dossiers=taux_dossiers/100
                        )
                        st.write(f"**üìä Total**: {points_totaux:.1f} pts")
                    
                    with col3:
                        montant = points_totaux * valeur_point
                        st.write(f"**üí∞ Montant**: {format_currency(montant)}")
                    
                    # Afficher la formule de calcul si elle existe
                    if ind.formule_calcul:
                        st.caption(f"‚ÑπÔ∏è {ind.formule_calcul}")
            
            # Ajouter un s√©parateur
            st.markdown("---")
    
    # Afficher les indicateurs dans chaque onglet
    for i, axe in enumerate(tab_names):
        with tabs[i]:
            # S√©parer les indicateurs socle/pr√©requis des indicateurs optionnels
            indicateurs_socle = [ind for ind in indicateurs_par_axe[axe] if ind.type in ["socle", "pr√©requis"]]
            indicateurs_optionnels = [ind for ind in indicateurs_par_axe[axe] if ind.type == "optionnel"]
            
            # Grouper les indicateurs
            groupes_socle = grouper_indicateurs(indicateurs_socle)
            groupes_optionnels = grouper_indicateurs(indicateurs_optionnels)
            
            # Afficher les indicateurs socle/pr√©requis
            if indicateurs_socle:
                st.write("## üîë Indicateurs socle / pr√©requis")
                for nom_groupe, indicateurs_groupe in groupes_socle.items():
                    if len(indicateurs_groupe) > 1:
                        # Groupe d'indicateurs similaires
                        afficher_groupe_indicateurs(nom_groupe, indicateurs_groupe, i)
                    else:
                        # Indicateur unique
                        afficher_indicateur_simple(indicateurs_groupe[0], i)
            
            # Afficher les indicateurs optionnels
            if indicateurs_optionnels:
                st.write("## üåü Indicateurs optionnels")
                for nom_groupe, indicateurs_groupe in groupes_optionnels.items():
                    if len(indicateurs_groupe) > 1:
                        # Groupe d'indicateurs similaires
                        afficher_groupe_indicateurs(nom_groupe, indicateurs_groupe, i)
                    else:
                        # Indicateur unique
                        afficher_indicateur_simple(indicateurs_groupe[0], i)
    
    # Afficher un r√©sum√© des points
    st.write("## üìä R√©sum√© des points valid√©s")
    
    # Calculer les points totaux par axe
    points_par_axe = {}
    for axe in indicateurs_par_axe:
        points_par_axe[axe] = {
            "total": 0,
            "valide": 0
        }
        
        for indicateur in indicateurs_par_axe[axe]:
            points = calculate_indicator_points(
                indicateur.id,
                patientele=patientele,
                nombre_ps=nombre_ps,
                taux_dossiers=taux_dossiers/100
            )
            
            if indicateur.est_valide:
                points_par_axe[axe]["valide"] += points
            
            points_par_axe[axe]["total"] += (indicateur.points_fixes + indicateur.points_variables) * indicateur.prorata
    
    # Cr√©er un DataFrame pour afficher les donn√©es
    df_resume = pd.DataFrame({
        "Axe": list(points_par_axe.keys()),
        "Points valid√©s": [axe["valide"] for axe in points_par_axe.values()],
        "Points potentiels": [axe["total"] for axe in points_par_axe.values()],
        "Taux de validation": [
            f"{axe['valide'] / axe['total'] * 100:.1f}%" if axe['total'] > 0 else "0%" 
            for axe in points_par_axe.values()
        ],
        "Montant (‚Ç¨)": [
            format_currency(axe["valide"] * valeur_point) 
            for axe in points_par_axe.values()
        ]
    })
    
    # Ajouter une ligne de total
    total_row = pd.DataFrame({
        "Axe": ["Total"],
        "Points valid√©s": [sum(axe["valide"] for axe in points_par_axe.values())],
        "Points potentiels": [sum(axe["total"] for axe in points_par_axe.values())],
        "Taux de validation": [
            f"{sum(axe['valide'] for axe in points_par_axe.values()) / sum(axe['total'] for axe in points_par_axe.values()) * 100:.1f}%" 
            if sum(axe['total'] for axe in points_par_axe.values()) > 0 else "0%"
        ],
        "Montant (‚Ç¨)": [
            format_currency(sum(axe["valide"] for axe in points_par_axe.values()) * valeur_point)
        ]
    })
    
    df_resume = pd.concat([df_resume, total_row], ignore_index=True)
    
    # Afficher le tableau
    st.dataframe(df_resume, use_container_width=True)
    
    # Ajouter une note explicative
    st.info("""
    ‚ÑπÔ∏è **Note**: S√©lectionnez le niveau valid√© pour chaque indicateur dans les menus d√©roulants.
    Les points variables sont calcul√©s en fonction des param√®tres d√©finis (patient√®le, nombre de PS, etc.).
    """)
